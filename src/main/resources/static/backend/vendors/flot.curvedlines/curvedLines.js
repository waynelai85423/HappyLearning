(function(a){var c={series:{curvedLines:{active:false,apply:false,monotonicFit:false,tension:0.5,nrSplinePoints:20,legacyOverride:undefined}}};function b(i){i.hooks.processOptions.push(k);function k(m,l){if(l.series.curvedLines.active){m.hooks.processDatapoints.unshift(j)}}function j(s,w,l){var r=l.points.length/l.pointsize;var m=0.005;var o=h(w.curvedLines);if(!o&&w.curvedLines.apply==true&&w.originSeries===undefined&&r>(1+m)){if(w.lines.fill){var u=d(l,w.curvedLines,1);var t=d(l,w.curvedLines,2);l.pointsize=3;l.points=[];var p=0;var q=0;var n=0;var v=2;while(n<u.length||p<t.length){if(u[n]==t[p]){l.points[q]=u[n];l.points[q+1]=u[n+1];l.points[q+2]=t[p+1];p+=v;n+=v}else{if(u[n]<t[p]){l.points[q]=u[n];l.points[q+1]=u[n+1];l.points[q+2]=q>0?l.points[q-1]:null;n+=v}else{l.points[q]=t[p];l.points[q+1]=q>1?l.points[q-2]:null;l.points[q+2]=t[p+1];p+=v}}q+=3}}else{if(w.lines.lineWidth>0){l.points=d(l,w.curvedLines,1);l.pointsize=2}}}}function d(m,l,p){if(typeof l.legacyOverride!="undefined"&&l.legacyOverride!=false){var n={fit:false,curvePointFactor:20,fitPointDist:undefined};var o=jQuery.extend(n,l.legacyOverride);return e(m,o,p)}return f(m,l,p)}function f(o,l,A){var r=o.points;var s=o.pointsize;var u=g(o,l,A);var t=[];var q=0;for(var p=0;p<r.length-s;p+=s){var m=p;var n=p+A;var y=r[m];var w=r[m+s];var z=(w-y)/Number(l.nrSplinePoints);t.push(r[m]);t.push(r[n]);for(var v=(y+=z);v<w;v+=z){t.push(v);t.push(u[q](v))}q++}t.push(r[r.length-s]);t.push(r[r.length-s+A]);return t}function g(r,o,J){var A=r.points;var D=r.pointsize;var F=[];var G=[];for(var v=0;v<A.length-D;v+=D){var p=v;var q=v+J;var s=A[p+D]-A[p];var t=A[q+D]-A[q];F.push(s);G.push(t/s)}var u=[G[0]];if(o.monotonicFit){for(var v=1;v<F.length;v++){var H=G[v];var C=G[v-1];if(H*C<=0){u.push(0)}else{var x=F[v];var B=F[v-1];var n=x+B;u.push(3*n/((n+x)/C+(n+B)/H))}}}else{for(var v=D;v<A.length-D;v+=D){var p=v;var q=v+J;u.push(Number(o.tension)*(A[q+D]-A[q-D])/(A[p+D]-A[p-D]))}}u.push(G[G.length-1]);var l=[];var m=[];for(v=0;v<F.length;v++){var y=u[v];var z=u[v+1];var H=G[v];var w=1/F[v];var n=y+z-H-H;l.push(n*w*w);m.push((H-n-y)*w)}var E=[];for(var v=0;v<F.length;v++){var I=function(O,K,L,M,N){return function(R){var P=R-O;var Q=P*P;return K*P*Q+L*Q+M*P+N}};E.push(I(A[v*D],l[v],m[v],u[v],A[v*D+J]))}return E}function e(v,q,V){var L=v.points;var M=v.pointsize;var J=Number(q.curvePointFactor)*(L.length/M);var Q=new Array;var T=new Array;var r=-1;var t=-1;var C=0;if(q.fit){var y;if(typeof q.fitPointDist=="undefined"){var H=L[0];var F=L[L.length-M];y=(F-H)/(500*100)}else{y=Number(q.fitPointDist)}for(var B=0;B<L.length;B+=M){var z;var o;r=B;t=B+V;z=L[r]-y;o=L[r]+y;var x=2;while(z==L[r]||o==L[r]){z=L[r]-(y*x);o=L[r]+(y*x);x++}Q[C]=z;T[C]=L[t];C++;Q[C]=L[r];T[C]=L[t];C++;Q[C]=o;T[C]=L[t];C++}}else{for(var B=0;B<L.length;B+=M){r=B;t=B+V;Q[C]=L[r];T[C]=L[t];C++}}var I=Q.length;var S=new Array();var w=new Array();S[0]=0;S[I-1]=0;w[0]=0;for(var B=1;B<I-1;++B){var u=(Q[B+1]-Q[B-1]);if(u==0){return[]}var O=(Q[B]-Q[B-1])/u;var K=O*S[B-1]+2;S[B]=(O-1)/K;w[B]=(T[B+1]-T[B])/(Q[B+1]-Q[B])-(T[B]-T[B-1])/(Q[B]-Q[B-1]);w[B]=(6*w[B]/(Q[B+1]-Q[B-1])-O*w[B-1])/K}for(var C=I-2;C>=0;--C){S[C]=S[C]*S[C+1]+w[C]}var P=(Q[I-1]-Q[0])/(J-1);var R=new Array;var U=new Array;var N=new Array;R[0]=Q[0];U[0]=T[0];N.push(R[0]);N.push(U[0]);for(C=1;C<J;++C){R[C]=R[0]+C*P;var E=I-1;var G=0;while(E-G>1){var D=Math.round((E+G)/2);if(Q[D]>R[C]){E=D}else{G=D}}var A=(Q[E]-Q[G]);if(A==0){return[]}var l=(Q[E]-R[C])/A;var m=(R[C]-Q[G])/A;U[C]=l*T[G]+m*T[E]+((l*l*l-l)*S[G]+(m*m*m-m)*S[E])*(A*A)/6;N.push(R[C]);N.push(U[C])}return N}function h(l){if(typeof l.fit!="undefined"||typeof l.curvePointFactor!="undefined"||typeof l.fitPointDist!="undefined"){throw new Error("CurvedLines detected illegal parameters. The CurvedLines API changed with version 1.0.0 please check the options object.");return true}return false}}a.plot.plugins.push({init:b,options:c,name:"curvedLines",version:"1.1.1"})})(jQuery);